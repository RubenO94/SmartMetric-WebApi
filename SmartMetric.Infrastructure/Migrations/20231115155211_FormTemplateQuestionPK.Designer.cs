// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartMetric.Infrastructure.DatabaseContext;

#nullable disable

namespace SmartMetric.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231115155211_FormTemplateQuestionPK")]
    partial class FormTemplateQuestionPK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplate", b =>
                {
                    b.Property<Guid>("FormTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FormTemplateId");

                    b.ToTable("FormTemplates");

                    b.HasData(
                        new
                        {
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2023, 11, 13, 10, 51, 27, 873, DateTimeKind.Local),
                            ModifiedDate = new DateTime(2023, 11, 13, 10, 51, 27, 873, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplateQuestion", b =>
                {
                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormTemplateId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("FormTemplateQuestions");

                    b.HasData(
                        new
                        {
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        },
                        new
                        {
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplateTranslation", b =>
                {
                    b.Property<Guid>("FormTemplateTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FormTemplateTranslationId");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("FormTemplateTranslations");

                    b.HasData(
                        new
                        {
                            FormTemplateTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa7"),
                            Description = "A survey to measure employee satisfaction.",
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            Language = "en",
                            Title = "Employee Satisfaction Survey"
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8"),
                            IsRequired = true,
                            ResponseType = "Rating"
                        },
                        new
                        {
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1"),
                            IsRequired = true,
                            ResponseType = "SingleChoice"
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.QuestionTranslation", b =>
                {
                    b.Property<Guid>("QuestionTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QuestionTranslationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionTranslations");

                    b.HasData(
                        new
                        {
                            QuestionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afaa"),
                            Description = "Please rate your overall satisfaction with your work on a scale of 1 to 10.",
                            Language = "en",
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8"),
                            Title = "How satisfied are you with your work?"
                        },
                        new
                        {
                            QuestionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb3"),
                            Description = "Please select your rating for the cafeteria food.",
                            Language = "en",
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1"),
                            Title = "How would you rate the cafeteria food?"
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOption", b =>
                {
                    b.Property<Guid>("RatingOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("NumericValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("RatingOptions");

                    b.HasData(
                        new
                        {
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afab"),
                            NumericValue = 1,
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        },
                        new
                        {
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afad"),
                            NumericValue = 5,
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        },
                        new
                        {
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afaf"),
                            NumericValue = 10,
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOptionTranslation", b =>
                {
                    b.Property<Guid>("RatingOptionTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("RatingOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingOptionTranslationId");

                    b.HasIndex("RatingOptionId");

                    b.ToTable("RatingOptionTranslations");

                    b.HasData(
                        new
                        {
                            RatingOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afac"),
                            Description = "Not Satisfied",
                            Language = "en",
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afab")
                        },
                        new
                        {
                            RatingOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afae"),
                            Description = "Neutral",
                            Language = "en",
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afad")
                        },
                        new
                        {
                            RatingOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb0"),
                            Description = "Very Satisfied",
                            Language = "en",
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afaf")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReviewType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ReviewId");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewQuestion", b =>
                {
                    b.Property<Guid>("ReviewQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewQuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewsQuestions");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewResponse", b =>
                {
                    b.Property<Guid>("ReviewResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewQuestionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SingleChoiceOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubmissionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ReviewResponseId");

                    b.HasIndex("ReviewQuestionId");

                    b.HasIndex("SingleChoiceOptionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("ReviewResponses");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOption", b =>
                {
                    b.Property<Guid>("SingleChoiceOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SingleChoiceOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SingleChoiceOptions");

                    b.HasData(
                        new
                        {
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb4"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        },
                        new
                        {
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb6"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        },
                        new
                        {
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb8"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOptionTranslation", b =>
                {
                    b.Property<Guid>("SingleChoiceOptionTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("SingleChoiceOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SingleChoiceOptionTranslationId");

                    b.HasIndex("SingleChoiceOptionId");

                    b.ToTable("SingleChoiceOptionTranslations");

                    b.HasData(
                        new
                        {
                            SingleChoiceOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb5"),
                            Description = "Excellent",
                            Language = "en",
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb4")
                        },
                        new
                        {
                            SingleChoiceOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb7"),
                            Description = "Good",
                            Language = "en",
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb6")
                        },
                        new
                        {
                            SingleChoiceOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb9"),
                            Description = "Fair",
                            Language = "en",
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb8")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Submission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EvaluatedEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplateQuestion", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.FormTemplate", "FormTemplate")
                        .WithMany("FormTemplateQuestions")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("FormTemplateQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormTemplate");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplateTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.FormTemplate", "FormTemplate")
                        .WithMany("Translations")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.QuestionTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("Translations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOption", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("RatingOptions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOptionTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.RatingOption", "RatingOption")
                        .WithMany("Translations")
                        .HasForeignKey("RatingOptionId");

                    b.Navigation("RatingOption");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Review", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.FormTemplate", "FormTemplate")
                        .WithMany()
                        .HasForeignKey("FormTemplateId");

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewQuestion", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("ReviewQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewResponse", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.ReviewQuestion", "ReviewQuestion")
                        .WithMany()
                        .HasForeignKey("ReviewQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMetric.Core.Domain.Entities.SingleChoiceOption", "SingleChoiceOption")
                        .WithMany()
                        .HasForeignKey("SingleChoiceOptionId");

                    b.HasOne("SmartMetric.Core.Domain.Entities.Submission", "Submission")
                        .WithMany("ReviewResponses")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewQuestion");

                    b.Navigation("SingleChoiceOption");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOption", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("SingleChoiceOptions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOptionTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.SingleChoiceOption", "SingleChoiceOption")
                        .WithMany("Translations")
                        .HasForeignKey("SingleChoiceOptionId");

                    b.Navigation("SingleChoiceOption");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Submission", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany("Submissions")
                        .HasForeignKey("ReviewId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplate", b =>
                {
                    b.Navigation("FormTemplateQuestions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Question", b =>
                {
                    b.Navigation("FormTemplateQuestions");

                    b.Navigation("RatingOptions");

                    b.Navigation("ReviewQuestions");

                    b.Navigation("SingleChoiceOptions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOption", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Review", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOption", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Submission", b =>
                {
                    b.Navigation("ReviewResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
