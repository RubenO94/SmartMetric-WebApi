// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartMetric.Infrastructure.DatabaseContext;

#nullable disable

namespace SmartMetric.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231120153950_RefacotryToEntitiesReviews")]
    partial class RefacotryToEntitiesReviews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Iddepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iddepartamento"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailChefia")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IddepartamentoPai")
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamentoPai");

                    b.Property<int?>("Identidade")
                        .HasColumnType("int")
                        .HasColumnName("IDEntidade");

                    b.Property<int?>("MaximoFuncionariosFerias")
                        .HasColumnType("int");

                    b.Property<bool?>("NaoValidarDocumentos")
                        .HasColumnType("bit");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("NumeroFuncionariosFerias")
                        .HasColumnType("int");

                    b.HasKey("Iddepartamento")
                        .HasName("IDDepartamento");

                    b.HasIndex(new[] { "Identidade" }, "IX_Departamentos_IDEntidade");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Identidade" }, "IX_Departamentos_IDEntidade"), 90);

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplate", b =>
                {
                    b.Property<Guid>("FormTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FormTemplateId");

                    b.ToTable("Metrics_FormTemplates");

                    b.HasData(
                        new
                        {
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2023, 11, 13, 10, 51, 27, 873, DateTimeKind.Local),
                            ModifiedDate = new DateTime(2023, 11, 13, 10, 51, 27, 873, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplateTranslation", b =>
                {
                    b.Property<Guid>("FormTemplateTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FormTemplateTranslationId");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("Metrics_FormTemplateTranslations");

                    b.HasData(
                        new
                        {
                            FormTemplateTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa7"),
                            Description = "A survey to measure employee satisfaction.",
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            Language = "en",
                            Title = "Employee Satisfaction Survey"
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Funcionario", b =>
                {
                    b.Property<int>("Idfuncionario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDFuncionario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idfuncionario"));

                    b.Property<bool?>("AcessoPortalWeb")
                        .HasColumnType("bit");

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool?>("AdministradorTerminais")
                        .HasColumnType("bit");

                    b.Property<bool?>("Alarme")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Assinatura")
                        .HasColumnType("image");

                    b.Property<bool?>("CartaConducao")
                        .HasColumnType("bit");

                    b.Property<string>("Cartao")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CartaoAlternativo")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CartaoAlternativo1")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CentroCusto")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("CstFullControl")
                        .HasColumnType("bit")
                        .HasColumnName("CST_FullControl");

                    b.Property<DateTime?>("DataAdmissao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDemissao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataExpiracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DeviceID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailEquipa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("EnviarOffline")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Folha")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Fotografia")
                        .HasColumnType("image");

                    b.Property<bool?>("Gdpr")
                        .HasColumnType("bit")
                        .HasColumnName("GDPR");

                    b.Property<DateTime?>("HorasMensais")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("HorasSemanais")
                        .HasColumnType("datetime");

                    b.Property<int?>("Iddepartamento")
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamento");

                    b.Property<int?>("Identidade")
                        .HasColumnType("int")
                        .HasColumnName("IDEntidade");

                    b.Property<int?>("Idgrupo")
                        .HasColumnType("int")
                        .HasColumnName("IDGrupo");

                    b.Property<string>("Idioma")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Idmunicipio")
                        .HasColumnType("int")
                        .HasColumnName("IDMunicipio");

                    b.Property<int?>("Idperfil")
                        .HasColumnType("int")
                        .HasColumnName("IDPerfil");

                    b.Property<int?>("IdperfilEquipa")
                        .HasColumnType("int")
                        .HasColumnName("IDPerfilEquipa");

                    b.Property<int?>("IdperfilEquipaAcesso")
                        .HasColumnType("int")
                        .HasColumnName("IDPerfilEquipaAcesso");

                    b.Property<int?>("IdperfilSuperiorHierarquico")
                        .HasColumnType("int")
                        .HasColumnName("IDPerfilSuperiorHierarquico");

                    b.Property<Guid?>("IdpersonApp")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDPersonAPP");

                    b.Property<int?>("IdplanoHorarios")
                        .HasColumnType("int")
                        .HasColumnName("IDPlanoHorarios");

                    b.Property<bool?>("IgnorarLimites")
                        .HasColumnType("bit");

                    b.Property<bool?>("IgnorarPrazoAntecedenciaExtras")
                        .HasColumnType("bit");

                    b.Property<string>("Local")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Localidade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginLdap")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LoginLDAP");

                    b.Property<bool?>("MarcarSemBiometria")
                        .HasColumnType("bit");

                    b.Property<string>("Morada")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Morada2")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool?>("NaoExportar")
                        .HasColumnType("bit");

                    b.Property<bool?>("NaoGerarSubAlimentacao")
                        .HasColumnType("bit");

                    b.Property<bool?>("NaoGerarSubTurno")
                        .HasColumnType("bit");

                    b.Property<bool?>("NaoValidarDocumentos")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomeAbreviado")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("NumeroFilhos")
                        .HasColumnType("int");

                    b.Property<bool?>("OcultarBh")
                        .HasColumnType("bit")
                        .HasColumnName("OcultarBH");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PerfilAcesso")
                        .HasColumnType("int");

                    b.Property<bool?>("PermitirFeriasAnoAnterior")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Pinapk")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PINAPK");

                    b.Property<string>("Pinapp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PINAPP");

                    b.Property<int?>("PlanosHorariosLinha")
                        .HasColumnType("int");

                    b.Property<bool?>("PrimeiroAcesso")
                        .HasColumnType("bit");

                    b.Property<bool?>("Seguranca")
                        .HasColumnType("bit");

                    b.Property<string>("Sexo")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("SoAcessos")
                        .HasColumnType("bit");

                    b.Property<string>("SubAlimentacao")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("SuperiorHierarquico")
                        .HasColumnType("bit");

                    b.Property<bool?>("SuperiorHierarquicoPorDelegacao")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Telemovel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("Temporario")
                        .HasColumnType("bit");

                    b.Property<int?>("TentativasAcesso")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimoAcessoSmartTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ValorBase")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ValorDiario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ValorHora")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ValorHoraFds")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ValorHoraFDS");

                    b.Property<decimal?>("ValorPremioAssiduidade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ValorSubsidio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("Visitado")
                        .HasColumnType("bit");

                    b.HasKey("Idfuncionario")
                        .HasName("IDFuncionario");

                    b.HasIndex(new[] { "DeviceId" }, "IX_Funcionarios_DeviceID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DeviceId" }, "IX_Funcionarios_DeviceID"), 90);

                    b.HasIndex(new[] { "Identidade" }, "IX_Funcionarios_IDEntidade");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Identidade" }, "IX_Funcionarios_IDEntidade"), 90);

                    b.HasIndex(new[] { "Idfuncionario" }, "_dta_index_Funcionarios_7_962102468__K1");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FuncionariosChefia", b =>
                {
                    b.Property<int?>("Iddepartamento")
                        .HasColumnType("int")
                        .HasColumnName("IDDepartamento");

                    b.Property<int?>("Idfuncionario")
                        .HasColumnType("int")
                        .HasColumnName("IDFuncionario");

                    b.Property<int?>("IdfuncionarioSuperior")
                        .HasColumnType("int")
                        .HasColumnName("IDFuncionarioSuperior");

                    b.Property<string>("Nivel")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("NivelAusencias")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("NivelAusenciasServico")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int?>("NivelBh")
                        .HasColumnType("int")
                        .HasColumnName("NivelBH");

                    b.Property<string>("NivelExtras")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("NivelFerias")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("NivelFuncionariosMarcacoes")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasIndex(new[] { "Iddepartamento" }, "IX_FuncionariosChefias_IDDepartamento");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Iddepartamento" }, "IX_FuncionariosChefias_IDDepartamento"), 100);

                    b.HasIndex(new[] { "Idfuncionario" }, "IX_FuncionariosChefias_IDFuncionario");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Idfuncionario" }, "IX_FuncionariosChefias_IDFuncionario"), 100);

                    b.HasIndex(new[] { "IdfuncionarioSuperior" }, "IX_FuncionariosChefias_IDFuncionarioSuperior");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IdfuncionarioSuperior" }, "IX_FuncionariosChefias_IDFuncionarioSuperior"), 100);

                    b.ToTable("FuncionariosChefias");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId");

                    b.HasIndex("FormTemplateId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Metrics_Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8"),
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            IsRequired = true,
                            ResponseType = "Rating"
                        },
                        new
                        {
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1"),
                            FormTemplateId = new Guid("8f7f0f64-5317-4562-b3fc-2c963f66afa6"),
                            IsRequired = true,
                            ResponseType = "SingleChoice"
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.QuestionTranslation", b =>
                {
                    b.Property<Guid>("QuestionTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QuestionTranslationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Metrics_QuestionTranslations");

                    b.HasData(
                        new
                        {
                            QuestionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afaa"),
                            Description = "Please rate your overall satisfaction with your work on a scale of 1 to 10.",
                            Language = "en",
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8"),
                            Title = "How satisfied are you with your work?"
                        },
                        new
                        {
                            QuestionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb3"),
                            Description = "Please select your rating for the cafeteria food.",
                            Language = "en",
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1"),
                            Title = "How would you rate the cafeteria food?"
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOption", b =>
                {
                    b.Property<Guid>("RatingOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("NumericValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Metrics_RatingOptions");

                    b.HasData(
                        new
                        {
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afab"),
                            NumericValue = 1,
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        },
                        new
                        {
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afad"),
                            NumericValue = 5,
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        },
                        new
                        {
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afaf"),
                            NumericValue = 10,
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa8")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOptionTranslation", b =>
                {
                    b.Property<Guid>("RatingOptionTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("RatingOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingOptionTranslationId");

                    b.HasIndex("RatingOptionId");

                    b.ToTable("Metrics_RatingOptionTranslations");

                    b.HasData(
                        new
                        {
                            RatingOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afac"),
                            Description = "Not Satisfied",
                            Language = "en",
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afab")
                        },
                        new
                        {
                            RatingOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afae"),
                            Description = "Neutral",
                            Language = "en",
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afad")
                        },
                        new
                        {
                            RatingOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb0"),
                            Description = "Very Satisfied",
                            Language = "en",
                            RatingOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afaf")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReviewType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ReviewId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Metrics_Reviews");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewDepartment", b =>
                {
                    b.Property<Guid>("ReviewDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Metrics_ReviewDepartments");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewEmployee", b =>
                {
                    b.Property<Guid>("ReviewEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Metrics_ReviewEmployees");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewResponse", b =>
                {
                    b.Property<Guid>("ReviewResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RatingValueResponse")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubmissionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ReviewResponseId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Metrics_ReviewResponses");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewTranslation", b =>
                {
                    b.Property<Guid>("ReviewTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReviewTranslationId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Metrics_ReviewTranslation");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOption", b =>
                {
                    b.Property<Guid>("SingleChoiceOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SingleChoiceOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Metrics_SingleChoiceOptions");

                    b.HasData(
                        new
                        {
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb4"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        },
                        new
                        {
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb6"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        },
                        new
                        {
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb8"),
                            QuestionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb1")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOptionTranslation", b =>
                {
                    b.Property<Guid>("SingleChoiceOptionTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("SingleChoiceOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SingleChoiceOptionTranslationId");

                    b.HasIndex("SingleChoiceOptionId");

                    b.ToTable("Metrics_SingleChoiceOptionTranslations");

                    b.HasData(
                        new
                        {
                            SingleChoiceOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb5"),
                            Description = "Excellent",
                            Language = "en",
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb4")
                        },
                        new
                        {
                            SingleChoiceOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb7"),
                            Description = "Good",
                            Language = "en",
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb6")
                        },
                        new
                        {
                            SingleChoiceOptionTranslationId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb9"),
                            Description = "Fair",
                            Language = "en",
                            SingleChoiceOptionId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afb8")
                        });
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Submission", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EvaluatedEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EvaluatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionId");

                    b.HasIndex("EvaluatedEmployeeId");

                    b.HasIndex("EvaluatorEmployeeId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Metrics_Submissions");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplateTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.FormTemplate", "FormTemplate")
                        .WithMany("Translations")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Question", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.FormTemplate", "FormTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany("Questions")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FormTemplate");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.QuestionTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("Translations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOption", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("RatingOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOptionTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.RatingOption", "RatingOption")
                        .WithMany("Translations")
                        .HasForeignKey("RatingOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RatingOption");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Review", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewDepartment", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Departamento", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany("Departments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewEmployee", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Funcionario", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany("Employees")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewResponse", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Submission", "Submission")
                        .WithMany("ReviewResponses")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.ReviewTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany("Translations")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOption", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Question", "Question")
                        .WithMany("SingleChoiceOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOptionTranslation", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.SingleChoiceOption", "SingleChoiceOption")
                        .WithMany("Translations")
                        .HasForeignKey("SingleChoiceOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SingleChoiceOption");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Submission", b =>
                {
                    b.HasOne("SmartMetric.Core.Domain.Entities.Funcionario", "EvaluatedEmployee")
                        .WithMany()
                        .HasForeignKey("EvaluatedEmployeeId");

                    b.HasOne("SmartMetric.Core.Domain.Entities.Funcionario", "EvaluatorEmployee")
                        .WithMany()
                        .HasForeignKey("EvaluatorEmployeeId");

                    b.HasOne("SmartMetric.Core.Domain.Entities.Review", "Review")
                        .WithMany("Submissions")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EvaluatedEmployee");

                    b.Navigation("EvaluatorEmployee");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.FormTemplate", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Question", b =>
                {
                    b.Navigation("RatingOptions");

                    b.Navigation("SingleChoiceOptions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.RatingOption", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Review", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Questions");

                    b.Navigation("Submissions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.SingleChoiceOption", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SmartMetric.Core.Domain.Entities.Submission", b =>
                {
                    b.Navigation("ReviewResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
